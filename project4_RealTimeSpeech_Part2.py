# -*- coding: utf-8 -*-
"""trabajoFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186o4HfXkbirElIJ1zAQHVNcwDkXB-KaT
"""

# las librerias requeridas
from sklearn.neural_network import MLPClassifier
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import librosa
from pydub import AudioSegment
import csv
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import plot_confusion_matrix
import seaborn as sns 
# fin las librerias requeridas

def identificar_parametros(filename):
    cadena1 = file_name
    if cadena1.find("otros")>=0 :
        return 0       
    if cadena1.find("rango1")>=0 :
        return 1
    if cadena1.find("rango2")>=0 :
        return 2
    if cadena1.find("rango3")>=0 :
        return 3
    else:
        return 999

cmap = plt.get_cmap('inferno')
plt.figure(figsize=(8,8))

slogan = 'rango1 rango2 rango3 otros'.split()
path = r'./drive/MyDrive/UNI CC CC/Maestri패a/1 semestre -2020 - 2/3 Mineria de datos/trabajo_final/TestData'
extension = '.wav'

for root, dirs_list, files_list in os.walk(path):
    for file_name in files_list:
        if os.path.splitext(file_name)[-1] == extension:
            file_name_path = os.path.join(root, file_name)
            name=os.path.splitext(file_name)[0]
           
            y, sr = librosa.load(file_name_path, mono=True, duration=5)
            plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');
            plt.axis('off');
            plt.savefig(f'{file_name_path[:-3]}png')
            plt.clf()

header = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'
for i in range(1, 21):
    header += f' mfcc{i}'
header += ' label'
header = header.split()
print(header)

# Extraer caracteristicas desde el Espectograma: Mel-frequency cepstral coefficients (MFCC), Spectral Centroid, Zero Crossing Rate, Chroma Frequencies, y Spectral Roll-off.
file = open('dataset.csv', 'w', newline='')
print(file)
with file:
    writer = csv.writer(file)
    writer.writerow(header)

extension = '.wav'
for root, dirs_list, files_list in os.walk(path):
    for file_name in files_list:
        if os.path.splitext(file_name)[-1] == extension:
            file_name_path = os.path.join(root, file_name)
            audio = file_name_path
            y, sr = librosa.load(audio, mono=True, duration=30)
            rmse = librosa.feature.rms(y=y)
            chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)
            spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)
            spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)
            rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)
            zcr = librosa.feature.zero_crossing_rate(y)
            mfcc = librosa.feature.mfcc(y=y, sr=sr)

            p_slogan = identificar_parametros(file_name)
            to_append = f'{file_name_path} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    
            for e in mfcc:
                to_append += f' {np.mean(e)}'
            to_append += f' {p_slogan}'
            file = open('dataset.csv', 'a', newline='')
            with file:
                writer = csv.writer(file)
                writer.writerow(to_append.split())

# Procesamiento de datos: Cargar la data del CSV, codificacion de etiquetas, divisi칩n de datos en conjunto de entrenamiento y prueba.
data = pd.read_csv('dataset.csv')
print(data.head())
data.head(10)


print(data.columns)

# Dropping unneccesary columns
data = data.drop(['filename'],axis=1)

#Encoding the Labels
genre_list = data.iloc[:, -1]
encoder = LabelEncoder()
y = encoder.fit_transform(genre_list)

#Scaling the Feature columns
scaler = StandardScaler()
X = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))

# separa los datos para entrenamiento y para pruebas
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=1, test_size=0.2)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# entrena clasificador
clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train,y_train)
print(clf)

# calcula probabilidades, solo el primero
y_test_prob = clf.predict_proba(X_test[:1])
print('X_test', X_test[:1])
print('y_test_prob', y_test_prob)

# predice resultados, solo el primero
y_test_pred = clf.predict(X_test)

print('X_test', X_test)
print('y_test_prd', y_test_pred)


# score
score = clf.score(X_test, y_test)
print(score)

# matriz de confusion
cmatrix = confusion_matrix(y_test, y_test_pred)
print(cmatrix)
plot_confusion_matrix(clf, X_test, y_test)
plt.show()

def isnp(M):
	if isinstance(M, np.ndarray): return True
	return False

def dim(M):
    if isnp(M): M = list(M)

    if not type(M) == list:
        return []

    return [len(M)] + dim(M[0])

print(clf.out_activation_)
print(clf.loss_)
print(clf.best_loss_)

print(clf.t_)
print(dim(clf.coefs_))
print(clf.n_iter_)
print(clf.n_layers_)
print(clf.n_outputs_)

#print(clf.loss_curve_)
pd.DataFrame(clf.loss_curve_).plot()
plt.show()

sns.heatmap(confusion_matrix(y_test, y_test_pred))

from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
print(accuracy_score(y_test, y_test_pred)*100)
print(recall_score(y_test, y_test_pred, average=None))
print(precision_score(y_test, y_test_pred, average=None)*100)

######################
###   Validacion   ###
######################

import pickle
import os
import re

pickle.dump(clf, open('classifier.pkl', 'wb'), protocol=4)

clf = pickle.load(open('classifier.pkl', 'rb'))


label = {0: 'otros', 
         1: 'rango1', 
         2: 'rango2', 
         3: 'rango3'}

cmap = plt.get_cmap('inferno')
plt.figure(figsize=(8,8))

slogan = 'rango1 rango2 rango3 otros'.split()
path = r'./drive/MyDrive/UNI CC CC/Maestri패a/1 semestre -2020 - 2/3 Mineria de datos/trabajo_final/Test'
extension = '.wav'

for root, dirs_list, files_list in os.walk(path):
    for file_name in files_list:
        if os.path.splitext(file_name)[-1] == extension:
            file_name_path = os.path.join(root, file_name)
            name=os.path.splitext(file_name)[0]
            
            y, sr = librosa.load(file_name_path, mono=True, duration=5)
            plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');
            plt.axis('off');
            plt.savefig(f'{file_name_path[:-3]}png')
            plt.clf()

header = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'
for i in range(1, 21):
    header += f' mfcc{i}'
header += ' label'
header = header.split()
print(header)

# Extraer caracteristicas desde el Espectograma: Mel-frequency cepstral coefficients (MFCC), Spectral Centroid, Zero Crossing Rate, Chroma Frequencies, y Spectral Roll-off.
file = open('dataset.csv', 'w', newline='')
print(file)
with file:
    writer = csv.writer(file)
    writer.writerow(header)
    
    
extension = '.wav'
for root, dirs_list, files_list in os.walk(path):
    for file_name in files_list:
        if os.path.splitext(file_name)[-1] == extension:
            file_name_path = os.path.join(root, file_name)
            audio = file_name_path
            y, sr = librosa.load(audio, mono=True, duration=30)
            rmse = librosa.feature.rms(y=y)
            chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)
            spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)
            spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)
            rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)
            zcr = librosa.feature.zero_crossing_rate(y)
            mfcc = librosa.feature.mfcc(y=y, sr=sr)
            # to_append = f'{filename} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    
            p_slogan = identificar_parametros(file_name)
            to_append = f'{file_name_path} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    
            for e in mfcc:
                to_append += f' {np.mean(e)}'
            to_append += f' {p_slogan}'
            file = open('dataset.csv', 'a', newline='')
            with file:
                writer = csv.writer(file)
                writer.writerow(to_append.split())

# Procesamiento de datos: Cargar la data del CSV, codificacion de etiquetas, divisi칩n de datos en conjunto de entrenamiento y prueba.
data = pd.read_csv('dataset.csv')
print(data.head())
data.head(10)

# Dropping unneccesary columns
data = data.drop(['filename'],axis=1)

#Encoding the Labels
genre_list = data.iloc[:, -1]
encoder = LabelEncoder()
y = encoder.fit_transform(genre_list)

#Scaling the Feature columns
scaler = StandardScaler()
X = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))

print("===================")
print(clf.predict(X))
for i in range(0,160):
    print("Prediction: {:s} Probability: {:.2f}".format(  label[clf.predict(X)[i]], clf.predict_proba(X)[i].max()*100 )  )

